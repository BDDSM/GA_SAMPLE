#Область Переменные_модуля

// АДРЕСА
&НаКлиенте
Перем м_сАдресСервера;
&НаКлиенте
Перем м_сАдресРесурсаСингл;
&НаКлиенте
Перем м_сАдресРесурсаПакет;
&НаКлиенте
Перем м_сАдресРесурсаСинглДебаг;
&НаКлиенте
Перем м_сАдресРесурсаПакетДебаг;

// СЛУЖЕБНЫЕ
&НаКлиенте
Перем м_HTTPСоединение;
&НаКлиенте
Перем м_сСобытиеЖР;
&НаКлиенте
Перем м_сВерсияМодуля;
&НаКлиенте
Перем м_сДатаМодуля;

#КонецОбласти

#Область Интерфейс_класса

// Процедура - Установить разрешение отправки статистики на сервер GA
//
// Параметры:
//  бРазрешено	 - Булево - отправка разрешена (Да / Нет)
//
&НаКлиенте
Процедура УстановитьРазрешениеОтправкиСтатистики(бРазрешено) Экспорт
	
	Если ТипЗнч(бРазрешено) = Тип("Булево") Тогда
		р_бРазрешено = бРазрешено;
	Иначе
		р_бРазрешено = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Установить режим отладки. Отправка ресурсу /debug/collect
//
// Параметры:
//  бРежимОтладки	 - Булево - режим отладки включен 
//
&НаКлиенте
Процедура УстановитьРежимОтладки(бРежимОтладки) Экспорт
	
	Если ТипЗнч(бРежимОтладки) = Тип("Булево") Тогда
		р_бРежимОтладки = бРежимОтладки;
	Иначе
		р_бРежимОтладки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Функция - Установить идентификатор приложения GA 
//
// Параметры:
//  сИдПриложения	 - Строка - ИД приложения в GA (Обязательно)
// 
// Возвращаемое значение:
//  Булево - признак успешного выполнения;
//
&НаКлиенте
Функция УстановитьИдентификаторПриложения(сИдПриложения)Экспорт
	Перем бВыполненоБезОшибок, сТекстОшибки;
	
	бВыполненоБезОшибок = Ложь;
	
	Если ТипЗнч(сИдПриложения) = Тип("Строка") И НЕ ПустаяСтрока(сИдПриложения) Тогда
		р_сИдПриложения = СокрЛП(сИдПриложения);
	Иначе
		сТекстОшибки = "Не установлен идентификатор приложения. Сбор статистики остановлен.
		|  Функция: УстановитьИдентификаторПриложения";
		SaveToJournal(м_сСобытиеЖР,сТекстОшибки,3);
		УстановитьРазрешениеОтправкиСтатистики(Ложь);
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
		
	бВыполненоБезОшибок = Истина;
	Возврат бВыполненоБезОшибок;
КонецФункции

// Процедура - Установить идентификатор клиента GA
//
// Параметры:
//  сИДКлиента	- Строка | УникальныйИдентификатор - (не обязательно) ИД клиента, который посылает статистику
// 
&НаКлиенте
Процедура УстановитьИдентификаторКлиента(сИдКлиента = "")Экспорт	
	
	Если ТипЗнч(сИдКлиента) = Тип("УникальныйИдентификатор") Тогда
		р_сИдКлиента = XMLСтрока(сИдКлиента);
	ИначеЕсли ТипЗнч(сИдКлиента) = Тип("Строка") И НЕ ПустаяСтрока(сИдКлиента) Тогда
		р_сИдКлиента = СокрЛП(сИдКлиента);
	Иначе
		р_сИдКлиента = Новый УникальныйИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

// Функция - Получить текст дисклеймера для пользователя обработки
// 
// Возвращаемое значение:
//  Строка - текст дисклеймера
//
&НаКлиенте
Функция GA_ПолучитьТекстДисклеймера() Экспорт
	Перем сТекст;
	
	сТекст = "ИНФОРМАЦИЯ О СБОРЕ ДАННЫХ
	|  Данное приложение (обработка) собирает данные о работе 
	|  пользователя с этой обработкой и отправляет
	|  их на сайт ""www.google-analytics.com"" с вашего разрешения. 
	|  Вы в любой момент можете отключить отправку данных.
	|  
	|  Все данные отправляются анонимно и НЕ СОДЕРЖАТ персональной 
	|  информации, в том числе НЕ СОДЕРЖАТ: 
	|    -- Данные организаций, контрагентов, сотрудников
	|    -- Данные документов
	|    -- Данные бухгалтерских и управленческих операций 
	|  
	|  Данные, которые отправляются на сайт ""www.google-analytics.com"" 
	|  содержат анонимную информацию:
	|    -- Наименование и версия конфигурации
	|    -- Версия платформы 1С Предприятие
	|    -- Версия операционной системы
	|    -- Наименование и версия обработки
	|    -- Факт начала и окончания работы с обработкой
	|    -- Факт просмотра форм обработки 
	|    -- Факт возникновения ошибки в обработке
	|    -- События пользовательского интерфейса
	|    -- События бизнес-логики обработки
	|    -- Сервисные события обработки ";
	
	Возврат сТекст;
КонецФункции

// Процедура - отправить сведения в Google Analytics
//
// Параметры:
//  мДанные	 - Массив - Массив с данными. Элемент массива - структура с параметрами GA
//
&НаКлиенте
Процедура GA_ОтправитьСведения(мДанные) Экспорт
	Перем сТекстОшибки, сАдресРесурса, HTTPЗапрос, HTTPОтвет, сТелоЗапроса; 
	Перем ПереносСтроки, стДанные, индекс;
	
	Если НЕ р_бРазрешено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(р_сИдПриложения) <> Тип("Строка") ИЛИ ПустаяСтрока(р_сИдПриложения) Тогда
		сТекстОшибки = "Не установлен обязательный параметр ""Идентификатор приложения""
		|  Функция: ОтправитьСведенияВGA";
		SaveToJournal(м_сСобытиеЖР,сТекстОшибки,3);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(мДанные) <> Тип("Массив") ИЛИ мДанные.Количество() = 0 Тогда
		сТекстОшибки = "Не верный формат данных для отправки. Нужен массив структур.
		|  Функция: ОтправитьСведенияВGA";
		SaveToJournal(м_сСобытиеЖР,сТекстОшибки,3);
		Возврат;		
	КонецЕсли;
	
	Если ТипЗнч(м_HTTPСоединение) <> Тип("HTTPСоединение") Тогда
		сТекстОшибки = "Не установлено соединение с GA
		|  Функция: ОтправитьСведенияВGA";
		SaveToJournal(м_сСобытиеЖР,сТекстОшибки,3);
		Возврат;		
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос();
	Если мДанные.Количество() = 1 Тогда
		сАдресРесурса = ?(р_бРежимОтладки,м_сАдресРесурсаСинглДебаг,м_сАдресРесурсаСингл);
		ПереносСтроки = "";
	Иначе
		сАдресРесурса = ?(р_бРежимОтладки,м_сАдресРесурсаПакетДебаг,м_сАдресРесурсаПакет);
		ПереносСтроки = Символы.ПС;
	КонецЕсли;
	HTTPЗапрос.АдресРесурса = сАдресРесурса;
	
	сТелоЗапроса = "";
	Для индекс = 0 По мДанные.Количество() - 1 Цикл
		стДанные = мДанные[индекс];
		сТелоЗапроса = сТелоЗапроса + ?(индекс = 0,"",ПереносСтроки) + СтруктуруВСтрокуСРазделителем(стДанные);
	КонецЦикла;
	
	Если ПустаяСтрока(сТелоЗапроса) Тогда
		сТекстОшибки = "Не сформировано тело запроса. Пустая строка ""сТелоЗапроса""
		|  Функция: ОтправитьСведенияВGA";
		SaveToJournal(м_сСобытиеЖР,сТекстОшибки,3);
		Возврат;		
	КонецЕсли;
	
	Попытка
		HTTPЗапрос.УстановитьТелоИзСтроки(КодироватьСтрокуURL(сТелоЗапроса));
		HTTPОтвет = м_HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		Если р_бРежимОтладки Тогда
			сТекстОшибки = "___ОТЛАДОЧНАЯ ИНФОРМАЦИЯ___
			|  Режим отладки включен
			|  Адрес ресурса: %1 
			|  Тело запроса:  %2
			|  Код ответа:    %3
			|  Тело ответа:   %4 ";
			
			сТекстОшибки = СтрШаблон(сТекстОшибки, сАдресРесурса, сТелоЗапроса, Строка(HTTPОтвет.КодСостояния), HTTPОтвет.ПолучитьТелоКакСтроку()); 
			SaveToJournal(м_сСобытиеЖР,сТекстОшибки,1);
		КонецЕсли;		
	Исключение
		сТекстОшибки = "Ошибка при отправке данных на на сервер GA.
		|  Функция: ОтправитьСведенияВGA
		|  Содержимое: %1  
		|  Описание ошибки: %2";
		сТекстОшибки = СтрШаблон(сТекстОшибки, сТелоЗапроса, ОписаниеОшибки()); 
		SaveToJournal(м_сСобытиеЖР,сТекстОшибки,3);		
	КонецПопытки;
	
КонецПроцедуры

// Функция - Подготовка данных для GA о сеансе работы
//
// Параметры:
//  сСеансИнфо	 - Строка - Значение перечисления ЭтотОбъект.SC
//  мДанные		 - Массив - Данные для GA, подготовленные ранее. Для пакетного режима /batch
// 
// Возвращаемое значение:
//  Массив - Данные для GA в элементе массива
//
&НаКлиенте
Функция GA_Сеанс(сСеансИнфо, мДанные = Неопределено) Экспорт
	Перем стДанные;
	
	Если ТипЗнч(сСеансИнфо) <> Тип("Строка") ИЛИ ПустаяСтрока(сСеансИнфо) Тогда
		Возврат мДанные;
	КонецЕсли;
	
	стДанные = Новый Структура();
	ОбязательныеПараметры_GA(стДанные);
	
	стДанные.Вставить("t", "event");
	стДанные.Вставить("sc", сСеансИнфо);
	Если ТипЗнч(ЭтотОбъект.EC) = Тип("Структура") И ЭтотОбъект.EC.Свойство("SRV") Тогда
		стДанные.Вставить("ec", ЭтотОбъект.EC.SRV);
	КонецЕсли;
	Если ТипЗнч(ЭтотОбъект.EA) = Тип("Структура") И ЭтотОбъект.EA.Свойство("SRV_seance") Тогда
		стДанные.Вставить("ea", ЭтотОбъект.EA.SRV_seance);
	КонецЕсли;	
	
	Если ТипЗнч(мДанные) <> Тип("Массив") Тогда
		мДанные = Новый Массив();
	КонецЕсли;
	мДанные.Добавить(стДанные);
	
	Возврат мДанные;
КонецФункции

// Функция - Подготовка данных для GA о переходе на форму (Страница)
//
// Параметры:
//  сОбработкаНаименование	 - Строка - наименование обработки. Доступен экспортный метод Обработка_Имя() 
//  сФормаНаименование		 - Строка - наименование формы. Доступен экспортный метод Форма_Имя(оФорма)
//  мДанные					 - Массив - Данные для GA, подготовленные ранее. Для пакетного режима /batch
// 
// Возвращаемое значение:
//  Массив - Данные для GA в элементе массива
//
&НаКлиенте
Функция GA_Форма_Страница(сОбработкаНаименование, сФормаНаименование, мДанные = Неопределено) Экспорт
	Перем стДанные;
	
	Если ТипЗнч(сОбработкаНаименование) <> Тип("Строка") ИЛИ ПустаяСтрока(сОбработкаНаименование) Тогда
		Возврат мДанные;
	КонецЕсли;
	Если ТипЗнч(сФормаНаименование) <> Тип("Строка") ИЛИ ПустаяСтрока(сФормаНаименование) Тогда
		Возврат мДанные;
	КонецЕсли;
	
	стДанные = Новый Структура();
	ОбязательныеПараметры_GA(стДанные);
	
	стДанные.Вставить("t", "pageview");
	стДанные.Вставить("dh", Лев(СокрЛП(сОбработкаНаименование),50));
	стДанные.Вставить("dp", Лев(СокрЛП(сФормаНаименование),1000));
	
	Если ТипЗнч(мДанные) <> Тип("Массив") Тогда
		мДанные = Новый Массив();
	КонецЕсли;
	мДанные.Добавить(стДанные);
	
	Возврат мДанные;	
КонецФункции

// Функция - Подготовка данных для GA о переходе на форму (Экран)
//
// Параметры:
//  сФормаНаименование	 - Строка - наименование формы. Доступен экспортный метод Форма_Имя(оФорма)
//  мДанные				 - Массив - Данные для GA, подготовленные ранее. Для пакетного режима /batch
// 
// Возвращаемое значение:
//  Массив - Данные для GA в элементе массива
//
&НаКлиенте
Функция GA_Форма_Экран(сФормаНаименование, мДанные = Неопределено) Экспорт
	Перем стДанные;
	
	Если ТипЗнч(сФормаНаименование) <> Тип("Строка") ИЛИ ПустаяСтрока(сФормаНаименование) Тогда
		Возврат мДанные;
	КонецЕсли;
	
	стДанные = Новый Структура();
	ОбязательныеПараметры_GA(стДанные);
	
	стДанные.Вставить("t", "screenview");
	стДанные.Вставить("cd", Лев(СокрЛП(сФормаНаименование),1000));
	
	Если ТипЗнч(мДанные) <> Тип("Массив") Тогда
		мДанные = Новый Массив();
	КонецЕсли;
	мДанные.Добавить(стДанные);
	
	Возврат мДанные;	
	
КонецФункции

// Функция - Подготовка данных для GA об ошибке
//
// Параметры:
//  сОшибкаОписание	 - Строка - Значение перечисления ЭтотОбъект.EXD 
//  бОшибкаФатальная - Булево - Признак фатальной ошибки
//  мДанные			 - Массив - Данные для GA, подготовленные ранее. Для пакетного режима /batch
// 
// Возвращаемое значение:
//  Массив - Данные для GA в элементе массива 
//
&НаКлиенте
Функция GA_Ошибка(сОшибкаОписание, Знач бОшибкаФатальная, мДанные = Неопределено) Экспорт
	Перем стДанные;
	
	Если ТипЗнч(сОшибкаОписание) <> Тип("Строка") ИЛИ ПустаяСтрока(сОшибкаОписание) Тогда
		Возврат мДанные;
	КонецЕсли;
	Если ТипЗнч(бОшибкаФатальная) <> Тип("Булево") Тогда
		бОшибкаФатальная = Ложь;
	КонецЕсли;
	
	стДанные = Новый Структура();
	ОбязательныеПараметры_GA(стДанные);
	
	стДанные.Вставить("t", "exception");
	стДанные.Вставить("exd", Лев(СокрЛП(сОшибкаОписание),70));
	стДанные.Вставить("exf", ?(бОшибкаФатальная,"1", "0"));
	
	Если ТипЗнч(мДанные) <> Тип("Массив") Тогда
		мДанные = Новый Массив();
	КонецЕсли;
	мДанные.Добавить(стДанные);
	
	Возврат мДанные;		
КонецФункции

// Функция - Подготовка данных для GA о событии
//
// Параметры:
//  сСобытиеКатегория	 - Строка - Значение перечисления ЭтотОбъект.EC 
//  сСобытиеНаименование - Строка - Значение перечисления ЭтотОбъект.EA 
//  сЭлемент			 - Строка - Наименование элемента формы или иное описание события 
//  чКоличество			 - Число - Количественная характеристика события 
//  мДанные				 - Массив - Данные для GA, подготовленные ранее. Для пакетного режима /batch 
// 
// Возвращаемое значение:
//  Массив - Данные для GA в элементе массива 
//
&НаКлиенте
Функция GA_Событие(сСобытиеКатегория, сСобытиеНаименование, Знач сЭлемент=Неопределено, Знач чКоличество=Неопределено, мДанные=Неопределено) Экспорт
	Перем стДанные;
	
	Если ТипЗнч(сСобытиеКатегория) <> Тип("Строка") ИЛИ ПустаяСтрока(сСобытиеКатегория) Тогда
		Возврат мДанные;
	КонецЕсли;
	Если ТипЗнч(сСобытиеНаименование) <> Тип("Строка") ИЛИ ПустаяСтрока(сСобытиеНаименование) Тогда
		Возврат мДанные;
	КонецЕсли;
	Если ТипЗнч(сЭлемент) <> Тип("Строка") ИЛИ ПустаяСтрока(сСобытиеНаименование) Тогда
		сЭлемент = Неопределено;
	КонецЕсли;
	Если ТипЗнч(чКоличество) <> Тип("Число") Тогда
		чКоличество = Неопределено;
	КонецЕсли;
	
	стДанные = Новый Структура();
	ОбязательныеПараметры_GA(стДанные);
	
	стДанные.Вставить("t", "event");
	стДанные.Вставить("ec", Лев(СокрЛП(сСобытиеКатегория),70));
	стДанные.Вставить("ea", Лев(СокрЛП(сСобытиеНаименование),250));
	Если сЭлемент <> Неопределено Тогда
		стДанные.Вставить("el", Лев(СокрЛП(сЭлемент),250));
	КонецЕсли;
	Если чКоличество <> Неопределено Тогда
		стДанные.Вставить("ev", Лев(Строка(чКоличество),20));
	КонецЕсли;
	
	Если ТипЗнч(мДанные) <> Тип("Массив") Тогда
		мДанные = Новый Массив();
	КонецЕсли;
	мДанные.Добавить(стДанные);
	
	Возврат мДанные;
КонецФункции

// Функция - Версия модуля GA
// 
// Возвращаемое значение:
//  Строка - версия модуля модGA
//
&НаКлиенте                                                           
Функция ВерсияМодуляGA() Экспорт
	Возврат м_сВерсияМодуля;
КонецФункции

#КонецОбласти

#Область Вспомогательные_публичные_методы

// Функция - Имя формы обработки
//
// Параметры:
//  оФорма	 - УправляемаяФорма	 - объект управляемой формы, имя которого нужно получить
// 
// Возвращаемое значение:
//  Строка - имя формы
//
&НаКлиенте
Функция Форма_Имя(оФорма) Экспорт
	
	Если ТипЗнч(оФорма) <> Тип("УправляемаяФорма") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Сред(оФорма.ИмяФормы, СтрНайти(оФорма.ИмяФормы, ".", НаправлениеПоиска.СКонца)+1);
КонецФункции

// Функция - Наименование обработки
// 
// Возвращаемое значение:
//  Строка - наименование обработки. Синоним, если доступно иначе имя
//
&НаКлиенте
Функция Обработка_Имя() Экспорт
	Возврат Обработка_Имя_НаСервере();
КонецФункции

#КонецОбласти

#Область Перечисления_параметров_GA

&НаСервере
Процедура Перечисление_Ошибка_Создать()
	Перем стПеречисление;
	
	стПеречисление = Новый Структура();
	стПеречисление.Вставить("US_inputerror", 	"Ошибка пользователя. Ввод неверной информации.");
	стПеречисление.Вставить("US_invalidaction", "Ошибка пользователя. Недопустимое действие.");
	стПеречисление.Вставить("US_accesserror", 	"Ошибка пользователя. Нет прав на совершение операции.");
	
	стПеречисление.Вставить("B2B_diskerror", 	"Ошибка B2B. Чтение, запись на диск.");
	стПеречисление.Вставить("B2B_httperror", 	"Ошибка B2B. Чтение, запись через http.");
	стПеречисление.Вставить("B2B_dataselect", 	"Ошибка B2B. Получение данных из БД.");
	стПеречисление.Вставить("B2B_datawrite", 	"Ошибка B2B. Запись данных в БД.");
	
	стПеречисление.Вставить("SRV_platform", 	"Ошибка SRV. Недопустимая версия платформы.");
	стПеречисление.Вставить("SRV_config", 		"Ошибка SRV. Недопустимая версия конфигурации.");
	
	ЭтотОбъект.EXD = Новый ФиксированнаяСтруктура(стПеречисление);		
КонецПроцедуры

&НаСервере
Процедура Перечисление_КатегорияСобытия_Создать()
	Перем стПеречисление;
	
	стПеречисление = Новый Структура();
	стПеречисление.Вставить("UX", "Действие пользователя");
	стПеречисление.Вставить("B2B", "Событие бизнес-логики");
	стПеречисление.Вставить("SRV", "Сервисное событие");
	
	ЭтотОбъект.EC = Новый ФиксированнаяСтруктура(стПеречисление);	
КонецПроцедуры

&НаСервере
Процедура Перечисление_Событие_Создать()
	Перем стПеречисление;
	
	стПеречисление = Новый Структура();
	стПеречисление.Вставить("UX_clic", 		"щелчок на кнопке");
	стПеречисление.Вставить("UX_select", 	"выбор поля, табличного поля");
	стПеречисление.Вставить("UX_refresh", 	"обновление табличного поля");
	стПеречисление.Вставить("UX_filter", 	"отбор в табличном поле");
	стПеречисление.Вставить("UX_change", 	"изменение данных");
	стПеречисление.Вставить("UX_delete", 	"удаление данных");
	
	стПеречисление.Вставить("B2B_proc", 	"процедура");
	стПеречисление.Вставить("B2B_send", 	"отправка данных");
	стПеречисление.Вставить("B2B_receive", 	"получение данных");
	стПеречисление.Вставить("B2B_sign", 	"подписание");
	
	стПеречисление.Вставить("SRV_sync", 	"синхронизация");
	стПеречисление.Вставить("SRV_backup", 	"резервное копирвание");
	стПеречисление.Вставить("SRV_upgrade", 	"обновление");	
	стПеречисление.Вставить("SRV_seance", 	"информация о сеансе");	
	стПеречисление.Вставить("SRV_setting", 	"настройка обработки");	
	
	ЭтотОбъект.EA = Новый ФиксированнаяСтруктура(стПеречисление);		
КонецПроцедуры

&НаСервере
Процедура Перечисление_Сеанс_Создать()
	Перем стПеречисление;
	
	стПеречисление = Новый Структура();
	стПеречисление.Вставить("start", "start");
	стПеречисление.Вставить("end", "end");
	
	ЭтотОбъект.SC = Новый ФиксированнаяСтруктура(стПеречисление);		
КонецПроцедуры

#КонецОбласти 

#Область Прочие_методы

&НаКлиенте
Процедура ОбязательныеПараметры_GA(стДанные)
	
	Если ТипЗнч(стДанные) <> Тип("Структура") Тогда
		стДанные = Новый Структура();
	КонецЕсли;
	
	стДанные.Вставить("v",   ВерсияПротоколаGA());
	стДанные.Вставить("tid", р_сИдПриложения);
	стДанные.Вставить("cid", р_сИдКлиента);
	стДанные.Вставить("uid", ИдПользователя());
	
	стДанные.Вставить("an",  Обработка_Имя());
	стДанные.Вставить("av",  Обработка_Версия());
	стДанные.Вставить("cd1", Платформа_Версия());
	стДанные.Вставить("cd2", ОС_Версия());
	стДанные.Вставить("cd3", Конфигурация_Имя());
	стДанные.Вставить("cd4", Конфигурация_Версия());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция Конфигурация_Имя()
	Возврат Метаданные.Имя;
КонецФункции

&НаСервереБезКонтекста
Функция Конфигурация_Версия()
	Возврат Метаданные.Версия;
КонецФункции

&НаКлиенте
Функция Платформа_Версия()
	Перем СистемнаяИнформация;
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	Возврат СистемнаяИнформация.ВерсияПриложения;
КонецФункции

&НаКлиенте
Функция ОС_Версия()
	Перем СистемнаяИнформация;
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	Возврат СистемнаяИнформация.ВерсияОС;
КонецФункции

&НаСервере
Функция Обработка_Имя_НаСервере()
	Перем ОО, сИмя;
	
	ОО = РеквизитФормыВЗначение("Объект");
	сИмя = ?(ПустаяСтрока(ОО.Метаданные().Синоним),ОО.Метаданные().Имя,ОО.Метаданные().Синоним);
	
	Возврат сИмя;
КонецФункции

&НаСервере
Функция Обработка_Версия()
	Перем ОО, сВерсия, сДата;
	
	ОО = РеквизитФормыВЗначение("Объект");
	
	Попытка
		сВерсия = ОО.м_сВерсияОбработки;
		сДата = ОО.м_сДатаОбработки;
	Исключение
	    сВерсия = "не установлена";
		сДата = "";
	КонецПопытки;
	
	Возврат сВерсия + ?(НЕ ПустаяСтрока(сДата)," от " + сДата, "");
КонецФункции

&НаКлиенте
Функция ВерсияПротоколаGA()
	Возврат "1";
КонецФункции

&НаСервереБезКонтекста
Функция ИдПользователя()
	Возврат XMLСтрока(ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура Установить_сСобытиеЖР()
	Перем сТекст;
	
	сТекст = "Модуль отправки статистики в GoogleAnalytics%1%2";
	м_сСобытиеЖР = СтрШаблон(сТекст, ?(м_сВерсияМодуля = Неопределено, "", " | "+ м_сВерсияМодуля), ?(м_сДатаМодуля = Неопределено, "", " от " + м_сДатаМодуля));
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьHTTPСоединение()
	Перем бВыполненоБезОшибок, сТекстОшибки, ТипСоединения;
	
	бВыполненоБезОшибок = Истина;
	
	Если ТипЗнч(м_HTTPСоединение)=Тип("HTTPСоединение") Тогда
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
	
	Если ТипЗнч(м_сАдресСервера) = Тип("Строка") И НЕ ПустаяСтрока(м_сАдресСервера) Тогда		
		Попытка
			ТипСоединения = Новый ЗащищенноеСоединениеOpenSSL(Неопределено,Неопределено);
			м_HTTPСоединение=Новый HTTPСоединение(м_сАдресСервера,,,,,,ТипСоединения);
		Исключение
			сТекстОшибки = "Не удалось установить HTTP соединение с %1
			|  Функция: УстановитьСоединение";
			сТекстОшибки = СтрШаблон(сТекстОшибки, м_сАдресСервера);
			SaveToJournal(м_сСобытиеЖР,сТекстОшибки,2);
			бВыполненоБезОшибок = Ложь;
		КонецПопытки;
	Иначе
		сТекстОшибки = "Не установлен адрес сервера Google
		|  Функция: УстановитьСоединение";
		SaveToJournal(м_сСобытиеЖР,сТекстОшибки,2);
		бВыполненоБезОшибок = Ложь;
	КонецЕсли;
	
	Возврат бВыполненоБезОшибок;
КонецФункции

&НаКлиенте
Процедура УстановитьАдреса()
	
	м_сАдресСервера="www.google-analytics.com";
	м_сАдресРесурсаСингл="/collect";
	м_сАдресРесурсаСинглДебаг="/debug/collect";
	м_сАдресРесурсаПакет="/batch";
	м_сАдресРесурсаПакетДебаг="/debug/batch";
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИдентификаторы()
	
	ЭтотОбъект.р_сИдКлиента = "";
	ЭтотОбъект.р_сИдПриложения = "";
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФлаги()
	
	ЭтотОбъект.р_бРазрешено = Ложь;
	ЭтотОбъект.р_бРежимОтладки = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьHTTPСоединение()
	м_HTTPСоединение=Неопределено;
КонецПроцедуры

// Процедура - Записать в Журнал регистрации (Сервер)
//
// Параметры:
//  сСобытие		 - Строка - Наименование события
//  сСообщение		 - Строка - Текст сообщения
//  чТипСообщения	 - Число - Тип сообщения:
//		* 1 - Информация
//		* 2 - Предупреждение
//		* 3 - Ошибка
//		* 4 - Примечание
//
&НаСервереБезКонтекста
Процедура SaveToJournal(Val сСобытие = "", Val сСообщение = "", Val чТипСообщения = 1)
	VAR sEvent, oMsgType, сТекст;
	
	IF (TypeOf(сСообщение) = Type("String")) AND (NOT IsBlankString(сСообщение)) THEN
		sEvent = ?(IsBlankString(сСобытие), "Х.З.", сСобытие);
		
		IF чТипСообщения = 1 THEN
			oMsgType = УровеньЖурналаРегистрации.Информация;
		ELSIF чТипСообщения = 2 THEN
			oMsgType = УровеньЖурналаРегистрации.Предупреждение;
		ELSIF чТипСообщения = 3 THEN
			oMsgType = УровеньЖурналаРегистрации.Ошибка;
		ELSIF чТипСообщения = 4 THEN
			oMsgType = УровеньЖурналаРегистрации.Примечание;
		ELSE
			oMsgType = УровеньЖурналаРегистрации.Предупреждение;
		ENDIF;
		
		ЗаписьЖурналаРегистрации(sEvent, oMsgType,,, сСообщение);
	ENDIF;
	
КонецПроцедуры

// Функция - Преобразовать структуру в строку с разделителем &
// Пример: Ключ1=Значение1&Ключ2=Значение2
//
// Параметры:
//  стДанные - Структура - данные тела запроса
// 
// Возвращаемое значение:
//  Строка - данные тела запроса в виде строки
//
&НаКлиенте
Функция СтруктуруВСтрокуСРазделителем(стДанные)
	Перем сРезультат, элемент, бПервыйЭлемент;
	Перем РАЗДЕЛИТЕЛЬ;
	
	// КОНСТАНТЫ
	РАЗДЕЛИТЕЛЬ = "&";
	
	Если ТипЗнч(стДанные) <> Тип("Структура") ИЛИ стДанные.Количество() = 0 Тогда
		Возврат сРезультат;
	КонецЕсли;
	
	сРезультат = "";
	бПервыйЭлемент = Истина;
	Для каждого элемент Из стДанные Цикл
		сРезультат = сРезультат + ?(бПервыйЭлемент, "", РАЗДЕЛИТЕЛЬ) + элемент.Ключ + "=" + элемент.Значение;
		бПервыйЭлемент = Ложь;
	КонецЦикла;
	
	Возврат сРезультат;
КонецФункции

&НаСервереБезКонтекста
Функция КодироватьСтрокуURL(сСтрока)
	Возврат КодироватьСтроку(сСтрока, СпособКодированияСтроки.URLВКодировкеURL)
КонецФункции

#КонецОбласти 

#Область Конструктор_деструктор

// Функция - Инициализация работы с GA
//
// Параметры:
//  сИДПриложения	 - Строка - (необязательно) Идентификатор приложения. Может быть установлен заранее методом УстановитьИдентификаторПриложения(сИдПриложения)
//  сИДКлиента		 - строка - (необязательно) Идентификатор клиента. Может быть установлен заранее методом УстановитьИдентификаторКлиента(сИДКлиента) 
// 
// Возвращаемое значение:
//  Булево - флаг успешного выполнения
//
&НаКлиенте
Функция НачатьРаботуС_GA(сИДПриложения = Неопределено, сИДКлиента = Неопределено) Экспорт
	Перем бВыполненоБезОшибок, сТекстОшибки;
	
	бВыполненоБезОшибок = Ложь;
	
	Установить_сСобытиеЖР();
	УстановитьАдреса();
	
	Если сИДПриложения <> Неопределено Тогда
		Если НЕ УстановитьИдентификаторПриложения(сИДПриложения) Тогда
			сТекстОшибки = "Не установлен идентификатор приложения. Начало работы с GA невозможно.
			|  Функция: НачатьРаботуС_GA";
			SaveToJournal(м_сСобытиеЖР,сТекстОшибки,3);
			Возврат бВыполненоБезОшибок;
		КонецЕсли;
	Иначе
		Если ПустаяСтрока(р_сИдПриложения) Тогда
			сТекстОшибки = "Не установлен идентификатор приложения. Начало работы с GA невозможно.
			|  Функция: НачатьРаботуС_GA";
			SaveToJournal(м_сСобытиеЖР,сТекстОшибки,3);	
			Возврат бВыполненоБезОшибок;
		КонецЕсли;
	КонецЕсли;
	
	Если сИДКлиента <> Неопределено Тогда
		УстановитьИдентификаторКлиента(сИДКлиента);
	Иначе
		Если ПустаяСтрока(р_сИдКлиента) Тогда
			сТекстОшибки = "Не установлен идентификатор клиента. Начало работы с GA невозможно.
			|  Функция: НачатьРаботуС_GA";
			SaveToJournal(м_сСобытиеЖР,сТекстОшибки,3);			
			Возврат бВыполненоБезОшибок;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ УстановитьHTTPСоединение() Тогда
		сТекстОшибки = "Не установлено HTTP соединение. Начало работы с GA невозможно.
		|  Функция: НачатьРаботуС_GA";
		SaveToJournal(м_сСобытиеЖР,сТекстОшибки,3);					
		Возврат бВыполненоБезОшибок;
	КонецЕсли; 
	
	бВыполненоБезОшибок = Истина;
	Возврат бВыполненоБезОшибок;
КонецФункции

&НаКлиенте
Функция ЗакончитьРаботуС_GA() Экспорт
	
	ЗакрытьHTTPСоединение();
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Перечисление_КатегорияСобытия_Создать();
	Перечисление_Ошибка_Создать();
	Перечисление_Сеанс_Создать();
	Перечисление_Событие_Создать();
	УстановитьИдентификаторы();
	УстановитьФлаги();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
м_сВерсияМодуля = "1-03";
м_сДатаМодуля 	= "20.01.2018";

#КонецОбласти
